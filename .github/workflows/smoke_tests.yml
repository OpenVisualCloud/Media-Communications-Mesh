name: smoke-tests-bare-metal

on:
  push:
    branches:
      - 'smoke-tests'
  workflow_dispatch:
    inputs:
      branch-to-checkout:
        type: string
        default: 'main'
        required: false
        description: 'Branch name to use'
      list_tests:
        type: choice
        required: false
        description: 'List all tests before running'
        options:
          - "true"
          - "false"
      markers:
        type: string
        default: 'smoke'
        required: false
        description: 'Markers to use for pytest'
env:
  BUILD_TYPE: 'Release'
  DPDK_VERSION: '23.11'
  DPDK_REBUILD: 'false'
  MCM_BINARIES_DIR: './mcm-binaries'
  MEDIA_PROXY: './mcm-binaries/media_proxy'
  MESH_AGENT: './mcm-binaries/mesh-agent'
  MCM_FFMPEG_6: './mcm-binaries/ffmpeg-6-1/ffmpeg'
  MCM_FFMPEG_7: './mcm-binaries/ffmpeg-7-0/ffmpeg'
  MTL__FFMPEG_6: './mtl-binaries/ffmpeg-6-1/ffmpeg'
  MTL__FFMPEG_7: './mtl-binaries/ffmpeg-7-0/ffmpeg'
permissions:
  contents: read
jobs:
  mtl-ffmpeg-build:
    runs-on: [Linux, self-hosted, DPDK]
    timeout-minutes: 60
    steps:
      - name: 'preparation: Harden Runner'
        uses: step-security/harden-runner@6c439dc8bdf85cadbbce9ed30d1c7b959517bc49 # v2.12.2
        with:
          egress-policy: audit
      # download mtl ffmpeg binaries or build locally
  validation-build-mcm:
    runs-on: [Linux, self-hosted, DPDK]
    timeout-minutes: 60
    outputs:
      pipenv-activate: ${{ steps.pipenv-install.outputs.VIRTUAL_ENV }}
    steps:
      - name: 'preparation: Harden Runner'
        uses: step-security/harden-runner@6c439dc8bdf85cadbbce9ed30d1c7b959517bc49 # v2.12.2
        with:
          egress-policy: audit

      - name: 'preparation: Restore valid repository owner and print env'
        if: always()
        run: |
          sudo chown -R "${USER}" "$(pwd)" || true
          env | grep BUILD_ || true
          env | grep DPDK_ || true
      - name: 'preparation: Checkout MCM'
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: 'smoke-tests'
      - name: 'Download build artifacts'
        uses: actions/download-artifact@eaceaf801fd36c7dee90939fad912460b18a1ffe # v4.1.2
        with:
          name: mcm-build
          path: ./mcm-binaries
      - name: 'Make binaries executable'
        run: |
          chmod +x ./mcm-binaries/media_proxy
          chmod +x ./mcm-binaries/mesh-agent
          chmod +x ./mcm-binaries/ffmpeg*
      - name: 'installation: Install pipenv environment'
        working-directory: tests/validation
        id: pipenv-install
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          echo "VIRTUAL_ENV=$PWD/venv/bin/activate" >> "$GITHUB_ENV"
      - name: 'add user name to environment and config'
        run: |
          echo "USER=${USER}" >> "$GITHUB_ENV"
          sed -i "s/{{ USER }}/${USER}/g" tests/validation/configs/topology_config_workflow.yaml
          sed -i "s|{{ KEY_PATH }}|/home/${USER}/.ssh/mcm_key|g" tests/validation/configs/topology_config_workflow.yaml
  validation-run-tests:
    needs: validation-build-mcm
    runs-on: [Linux, self-hosted, DPDK]
    timeout-minutes: 60
    env:
      PYTEST_RETRIES: '3'
      MARKERS: ${{ github.event.inputs.markers || 'smoke' }}
      LIST_TESTS: ${{ github.event.inputs.list_tests || 'true' }}
    steps:
      - name: 'preparation: Kill pytest routines'
        run: |
          sudo killall -SIGINT pipenv || true
          sudo killall -SIGINT pytest || true
      - name: 'list all tests marked with ${{ env.MARKERS }}'
        if: ${{ env.LIST_TESTS == 'true' }}
        run: |
          sudo tests/validation/venv/bin/python3 -m pytest \
            --collect-only --quiet ./tests/validation/functional/ \
            -m "${{ env.MARKERS }}"
      - name: 'execution: Run validation-bare-metal tests in virtual environment'
        run: |
          sudo tests/validation/venv/bin/python3 -m pytest \
            --topology_config=tests/validation/configs/topology_config_workflow.yaml \
            --test_config=tests/validation/configs/test_config_workflow.yaml \
            ./tests/validation/functional/ \
            --template=html/index.html --report=report.html" \
            -m "${{ env.MARKERS }}"