name: validation-bare-metal

on:
  # allow manually trigger
  workflow_dispatch:
    inputs:
      branch-to-checkout:
        type: string
        default: 'main'
        required: false
        description: 'Branch name to use'
      validation-iface-binding:
        type: choice
        required: true
        description: 'Type of iface binding to use'
        options:
          - "create_vf"
          - "create_kvf"
          - "create_tvf"
          - "bind_pmd"
          - "bind_kernel"
      validation-test-port-p:
        type: choice
        required: true
        description: 'Which to use as Test-Port-P'
        options:
          - TEST_VF_PORT_P_0
          - TEST_VF_PORT_P_1
          - TEST_VF_PORT_P_2
          - TEST_PF_PORT_P
          - TEST_VF_PORT_R_0
          - TEST_VF_PORT_R_1
          - TEST_VF_PORT_R_2
          - TEST_PF_PORT_R
          - TEST_DMA_PORT_P
          - TEST_DMA_PORT_R
      validation-test-port-r:
        type: choice
        required: true
        description: 'Which to use as Test-Port-R'
        options:
          - TEST_VF_PORT_P_1
          - TEST_VF_PORT_P_0
          - TEST_VF_PORT_P_2
          - TEST_PF_PORT_P
          - TEST_VF_PORT_R_0
          - TEST_VF_PORT_R_1
          - TEST_VF_PORT_R_2
          - TEST_PF_PORT_R
          - TEST_DMA_PORT_P
          - TEST_DMA_PORT_R
      validation-no-fail-tests:
        type: choice
        required: false
        description: 'Run all tests, non will fail'
        options:
          - "true"
          - "false"
      validation-tests-1:
        type: string
        default: 'single/video/pacing'
        required: true
        description: '1st validation tests to run'
      validation-tests-2:
        type: string
        default: 'single/ancillary'
        required: false
        description: '2nd validation tests to run'
      validation-pre-release-1:
        description: 'Select from pre-release group tests nr-1'
        required: false
        type: choice
        options:
          - NONE
          - ancillary
          - kernel-socket
          - rss-mode
          - st20p
          - st30p
          - st41
          - udp
          - video
          - xdp
      validation-pre-release-2:
        description: 'Select from pre-release group tests nr-2'
        required: false
        type: choice
        options:
          - NONE
          - ffmpeg-plugin
          - fuzzy-tests
          - performance
          - ptp
          - rx-timing
          - vero
          - virtio-enable
          - wrong-parameter
      validation-pre-release-3:
        description: 'Select from pre-release group tests nr-3'
        required: false
        type: choice
        options:
          - NONE
          - gpu-direct
          - gpu-enabling

env:
  BUILD_TYPE: 'Release'
  DPDK_VERSION: '23.11'
  DPDK_REBUILD: 'false'

permissions:
  contents: read

jobs:
  validation-build-mtm:
    runs-on: [Linux, self-hosted, DPDK]
    timeout-minutes: 60
    outputs:
      pipenv-activate: ${{ steps.pipenv-install.outputs.VIRTUAL_ENV }}
    steps:
      - name: 'preparation: Harden Runner'
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
        with:
          egress-policy: audit

      - name: 'Checkout repository'
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: 'Install OS level dependencies'
        run: eval 'source scripts/setup_build_env.sh && install_package_dependencies'

      - name: 'Check local dependencies build cache'
        id: load-local-dependencies-cache
        uses: actions/cache/restore@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: ${{ env.BUILD_DIR }}
          key: ${{ runner.os }}-${{ hashFiles('versions.env') }}-${{ hashFiles('scripts/setup*.sh') }}

      - name: 'Download, unpack and patch build dependencies'
        if: steps.load-local-dependencies-cache.outputs.cache-hit != 'true'
        run: eval 'source scripts/setup_build_env.sh && get_download_unpack_dependencies'

      - name: 'Clone and patch ffmpeg 6.1 and 7.0'
        if: steps.load-local-dependencies-cache.outputs.cache-hit != 'true'
        run: |
          ffmpeg-plugin/clone-and-patch-ffmpeg.sh "6.1"
          ffmpeg-plugin/clone-and-patch-ffmpeg.sh "7.0"

      - name: 'Build and Install xdp and libbpf'
        run: eval 'source scripts/setup_build_env.sh && lib_install_xdp_bpf_tools'

      - name: 'Build and Install libfabric'
        run: eval 'source scripts/setup_build_env.sh && lib_install_fabrics'

      - name: 'Build and Install the DPDK'
        run: eval 'source scripts/setup_build_env.sh && lib_install_dpdk'

      - name: 'Build and Install the MTL'
        run: eval 'source scripts/setup_build_env.sh && lib_install_mtl'

      - name: 'Build and Install JPEG XS'
        run: eval 'source scripts/setup_build_env.sh && lib_install_jpeg_xs'

      - name: 'Build and Install JPEG XS ffmpeg plugin'
        run: eval 'source scripts/setup_build_env.sh && lib_install_mtl_jpeg_xs_plugin'

      - name: 'Build gRPC and dependencies'
        run: eval 'source scripts/setup_build_env.sh && lib_install_grpc'

      - name: 'Build MCM SDK and Media Proxy'
        run: eval 'source scripts/common.sh && ./build.sh "${PREFIX_DIR}"'

      - name: 'Build FFmpeg 6.1 with MCM plugin'
        working-directory: ${{ github.workspace }}/ffmpeg-plugin
        run: |
          ./configure-ffmpeg.sh "6.1" --disable-doc --disable-debug && \
          ./build-ffmpeg.sh "6.1"

      - name: 'Build FFmpeg 7.0 with MCM plugin'
        working-directory: ${{ github.workspace }}/ffmpeg-plugin
        run: |
          ./configure-ffmpeg.sh "7.0" --disable-doc --disable-debug && \
          ./build-ffmpeg.sh "7.0"

      - name: 'installation: Install pipenv environment'
        working-directory: tests/validation
        id: pipenv-install
        run: |
          python3 -m pip install pipenv
          python3 -m pipenv install -r requirements.txt
          echo "VIRTUAL_ENV=$(python3 -m pipenv --venv)/bin/activate" >> "$GITHUB_ENV"

  # Timeout of this job is set to 12h [60m/h*12h=720m]
  validation-run-tests:
    needs: [validation-build-mtm]
    runs-on: [Linux, self-hosted, DPDK]
    timeout-minutes: 720
    env:
      PYTEST_ALIAS: 'sudo --preserve-env python3 -m pipenv run pytest'
      PYTEST_PARAMS: '--media=/mnt/media --build="../.."'
      PYTEST_RETRIES: '3'
    steps:
      - name: 'preparation: Harden Runner'
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
        with:
          egress-policy: audit

      - name: 'cleanup: Generate runner summary'
        if: always()
        run: |
          {
          echo "## Runner ${{ runner.name }}"
          echo "Bellow ENV variables are defined on the ${{ runner.name }} self-hosted runner side"
          echo "| Variable | Value |"
          echo "| --- | --- |"
          echo "| TEST_PF_PORT_P | ${TEST_PF_PORT_P} |"
          echo "| TEST_PF_PORT_R | ${TEST_PF_PORT_R} |"
          echo "| TEST_PORT_P | ${TEST_PORT_P} |"
          echo "| TEST_PORT_R | ${TEST_PORT_R} |"
          echo "| TEST_DMA_PORT_P | ${TEST_DMA_PORT_P} |"
          echo "| TEST_DMA_PORT_R | ${TEST_DMA_PORT_R} |"
          echo "| TEST_VF_PORT_P_0 | ${TEST_VF_PORT_P_0} |"
          echo "| TEST_VF_PORT_P_1 | ${TEST_VF_PORT_P_1} |"
          echo "| TEST_VF_PORT_P_2 | ${TEST_VF_PORT_P_2} |"
          echo "| TEST_VF_PORT_P_3 | ${TEST_VF_PORT_P_3} |"
          echo "| TEST_VF_PORT_R_0 | ${TEST_VF_PORT_R_0} |"
          echo "| TEST_VF_PORT_R_1 | ${TEST_VF_PORT_R_1} |"
          echo "| TEST_VF_PORT_R_2 | ${TEST_VF_PORT_R_2} |"
          echo "| TEST_VF_PORT_R_3 | ${TEST_VF_PORT_R_3} |"
          } >> "$GITHUB_STEP_SUMMARY"
