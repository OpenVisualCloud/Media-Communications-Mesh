name: Base Build

on:
  workflow_call:
    inputs:
      branch:
        required: false
        type: string
        default: "main"
        description: "Branch to checkout"
      tag:
        required: false
        type: string
        description: "Tag to checkout"
      runner:
        required: true
        type: string
        description: "Runner to use for the build job"

env:
  BUILD_TYPE: Release
  BUILD_DIR: "${{ github.workspace }}/_build"
  DEBIAN_FRONTEND: noninteractive
  MTL_BUILD_DISABLE_PCAPNG: true
  PREFIX_DIR: "${{ github.workspace }}/_install"

defaults:
  run:
    shell: bash

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  build-baremetal-ubuntu:
    runs-on: ${{ inputs.runner }}
    timeout-minutes: 120
    steps:
      - name: "Harden Runner"
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit
      - name: "Fix permissions before checkout"
        run: |
          if [ -d "${{ github.workspace }}" ]; then
          sudo chown -R "${USER}" "${{ github.workspace }}" || true
          sudo chmod -R u+w "${{ github.workspace }}" || true
          fi

      - name: "Checkout repository"
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ inputs.tag || inputs.branch }}

      - name: "Install OS level dependencies"
        run: eval 'source scripts/setup_build_env.sh && install_package_dependencies'

      - name: "Check local dependencies build cache"
        id: load-local-dependencies-cache
        uses: actions/cache/restore@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: ${{ env.BUILD_DIR }}
          key: ${{ runner.os }}-${{ hashFiles('versions.env') }}-${{ hashFiles('scripts/setup*.sh') }}

      - name: "Download, unpack and patch build dependencies"
        if: steps.load-local-dependencies-cache.outputs.cache-hit != 'true'
        run: eval 'source scripts/setup_build_env.sh && get_download_unpack_dependencies'

      - name: "Clone and patch ffmpeg 7.0"
        if: steps.load-local-dependencies-cache.outputs.cache-hit != 'true'
        run: |
          ffmpeg-plugin/clone-and-patch-ffmpeg.sh "7.0"

      - name: "Build and Install xdp and libbpf"
        run: eval 'source scripts/setup_build_env.sh && lib_install_xdp_bpf_tools'

      - name: "Build and Install libfabric"
        run: eval 'source scripts/setup_build_env.sh && lib_install_fabrics'

      - name: "Build and Install the DPDK (skipped: already installed on runner)"
        if: always() && false # Always skip this step for now
        run: |
          echo "Skipping DPDK build and install as it is already installed on the machine."
          # eval 'source scripts/setup_build_env.sh && lib_install_dpdk'

      - name: "Check if DPDK version needs to be updated"
        id: check_dpdk_version
        run: |
          if grep -q "DPDK_VER=25.03" "${{ github.workspace }}/versions.env" && \
             grep -q "DPDK_VER=25.03" "${{ github.workspace }}/ffmpeg-plugin/versions.env" && \
             grep -q "DPDK_VER=25.03" "${{ github.workspace }}/media-proxy/versions.env" && \
             grep -q "DPDK_VER=25.03" "${{ github.workspace }}/sdk/versions.env"; then
            echo "DPDK version is already set correctly."
            echo "need_update=false" >> "$GITHUB_OUTPUT"
          else
            echo "DPDK version needs to be updated."
            echo "need_update=true" >> "$GITHUB_OUTPUT"
          fi

      - name: "Switch DPDK version to currently used on the machine"
        if: steps.check_dpdk_version.outputs.need_update == 'true'
        run: |
          sed -i 's|DPDK_VER=23.11|DPDK_VER=25.03|g' \
            "${{ github.workspace }}/versions.env" \
            "${{ github.workspace }}/ffmpeg-plugin/versions.env" \
            "${{ github.workspace }}/media-proxy/versions.env" \
            "${{ github.workspace }}/sdk/versions.env"

      - name: "Check if MTL version needs to be updated"
        id: check_mtl_version
        run: |
          if grep -q "MTL_VER=main" "${{ github.workspace }}/versions.env" && \
             grep -q "MTL_VER=main" "${{ github.workspace }}/ffmpeg-plugin/versions.env" && \
             grep -q "MTL_VER=main" "${{ github.workspace }}/media-proxy/versions.env" && \
             grep -q "MTL_VER=main" "${{ github.workspace }}/sdk/versions.env"; then
            echo "MTL version is already set correctly."
            echo "need_update=false" >> "$GITHUB_OUTPUT"
          else
            echo "MTL version needs to be updated."
            echo "need_update=true" >> "$GITHUB_OUTPUT"
          fi

      - name: "Switch MTL version to currently used on the machine"
        if: steps.check_mtl_version.outputs.need_update == 'true'
        run: |
          sed -i 's|MTL_VER=v25.02|MTL_VER=main|g' \
            "${{ github.workspace }}/versions.env" \
            "${{ github.workspace }}/ffmpeg-plugin/versions.env" \
            "${{ github.workspace }}/media-proxy/versions.env" \
            "${{ github.workspace }}/sdk/versions.env"

      - name: "Build and Install the MTL(skipped: already installed on runner)"
        if: always() && false # Always skip this step for now
        run: |
          echo "Skipping MTL build and install as it is already installed on the machine."
          # eval 'source scripts/setup_build_env.sh && lib_install_mtl'

      - name: "Build and Install JPEG XS"
        run: eval 'source scripts/setup_build_env.sh && lib_install_jpeg_xs'

      - name: "Build and Install JPEG XS ffmpeg plugin"
        run: eval 'source scripts/setup_build_env.sh && lib_install_mtl_jpeg_xs_plugin'

      - name: "Build gRPC and dependencies"
        run: eval 'source scripts/setup_build_env.sh && lib_install_grpc'

      - name: "Build MCM SDK and Media Proxy"
        run: eval 'source scripts/common.sh && ./build.sh "${PREFIX_DIR}"'

      - name: "Build FFmpeg 7.0 with MCM plugin"
        working-directory: ${{ github.workspace }}/ffmpeg-plugin
        run: |
          ./configure-ffmpeg.sh "7.0" --prefix=${{ env.BUILD_DIR }}/ffmpeg-7-0 --disable-doc --disable-debug && \
          ./build-ffmpeg.sh "7.0"

      - name: Install RxTxApp dependencies
        run: sudo apt-get update && sudo apt-get install -y libjansson-dev
      - name: "build RxTxApp"
        working-directory: ${{ github.workspace }}/tests/tools/TestApp
        run: |
          rm -rf build && \
          mkdir build && cd build && \
          cmake .. && \
          make
      - name: "clone FFMPEG repository"
        run: |
          echo "Cloning FFMPEG repository"
      - name: "clone MTL repository"
        run: |
          echo "Cloning MTL repository"
      - name: "build MTL FFMPEG"
        run: |
          echo "Building MTL FFMPEG"

      - name: "upload media-proxy and mcm binaries"
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: mcm-build
          path: |
            ${{ env.BUILD_DIR }}/mcm/bin/media_proxy
            ${{ env.BUILD_DIR }}/mcm/bin/mesh-agent
            ${{ env.BUILD_DIR }}/mcm/lib/libmcm_dp.so.*
            ${{ env.BUILD_DIR }}/ffmpeg-7-0/ffmpeg
            ${{ env.BUILD_DIR }}/ffmpeg-7-0/lib/**
