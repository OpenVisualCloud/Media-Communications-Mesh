name: report-summary

on:
  workflow_call:
    inputs:
      artifact-name:
        required: true
        type: string
      artifact-path:
        required: false
        type: string

jobs:
  summarize:
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Download report artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ inputs.artifact-name }}
          path: ./report_artifacts

      - name: Locate report.json
        id: locate
        run: |
          if [ -n "${{ inputs.artifact-path }}" ]; then
            REPORT_PATH="${{ inputs.artifact-path }}"
          else
            REPORT_PATH=$(find report_artifacts -type f -name 'report.json' | head -n1 || true)
          fi
          echo "REPORT_PATH=$REPORT_PATH" >> "$GITHUB_ENV"
          if [ -z "$REPORT_PATH" ]; then
            echo "No report.json found in downloaded artifacts"
            exit 1
          fi

      - name: Add report to summary
        if: always()
        run: |
          {
            echo "## Smoke Tests Report"
            echo ""

            REPORT_FILE="$REPORT_PATH"
            if [ -f "$REPORT_FILE" ]; then
              PASSED=$(jq -r '.summary.passed // empty' "$REPORT_FILE" 2>/dev/null || true)
              FAILED=$(jq -r '.summary.failed // empty' "$REPORT_FILE" 2>/dev/null || true)
              SKIPPED=$(jq -r '.summary.skipped // empty' "$REPORT_FILE" 2>/dev/null || true)
              ERRORS=$(jq -r '.summary.errors // empty' "$REPORT_FILE" 2>/dev/null || true)

              if [ -z "${PASSED}" ] || [ -z "${FAILED}" ] || [ -z "${SKIPPED}" ] || [ -z "${ERRORS}" ]; then
                if jq -e '.tests' "$REPORT_FILE" >/dev/null 2>&1; then
                  PASSED=$(jq '[.tests[] | select(.outcome=="passed")] | length' "$REPORT_FILE")
                  FAILED=$(jq '[.tests[] | select(.outcome=="failed" or .outcome=="error")] | length' "$REPORT_FILE")
                  SKIPPED=$(jq '[.tests[] | select(.outcome=="skipped")] | length' "$REPORT_FILE")
                  ERRORS=$(jq '[.tests[] | select(.outcome=="error")] | length' "$REPORT_FILE")
                fi
              fi

              PASSED=${PASSED:-0}
              FAILED=${FAILED:-0}
              SKIPPED=${SKIPPED:-0}
              ERRORS=${ERRORS:-0}

              echo "| Status | Count |"
              echo "| ------ | ----- |"
              echo "| ✅ Passed | ${PASSED} |"
              echo "| ❌ Failed | ${FAILED} |"
              echo "| ⚠️ Error | ${ERRORS} |"
              echo "| ⏭️ Skipped | ${SKIPPED} |"
              echo ""

              TOTAL=$((PASSED + FAILED + ERRORS + SKIPPED))
              echo "**Total Tests:** $TOTAL"
              echo ""
              if [ "${FAILED}" -gt 0 ] || [ "${ERRORS}" -gt 0 ]; then
                echo "❌ **Some tests failed!** Please check the detailed report."
              else
                echo "✅ **All tests passed!**"
              fi
              echo ""

              echo ""
              echo "### Test results"
              echo ""
              echo "| Test | Status |"
              echo "| ---- | ------ |"
              if jq -e '.tests' "$REPORT_FILE" >/dev/null 2>&1; then
                jq -r '.tests[] | "\(.nodeid)\t\(.outcome // \"passed\")"' "$REPORT_FILE" | \
                while IFS=$'\t' read -r NODEID OUTCOME; do
                  case "${OUTCOME}" in
                    passed) ICON="✅ Passed" ;;
                    failed) ICON="❌ Failed" ;;
                    error) ICON="⚠️ Error" ;;
                    skipped) ICON="⏭️ Skipped" ;;
                    xfailed) ICON="❗ XFailed" ;;
                    xpassed) ICON="❗ XPassed" ;;
                    *) ICON="${OUTCOME}" ;;
                  esac
                  ESC_NODEID=$(printf '%s' "${NODEID}" | sed 's/`/\\`/g' | sed 's/|/\\|/g')
                  echo "| \`${ESC_NODEID}\` | ${ICON} |"
                done
              else
                echo "No per-test details available in report.json"
              fi
            else
              echo "❌ No report.json file was generated"
            fi
          } >> "$GITHUB_STEP_SUMMARY"
