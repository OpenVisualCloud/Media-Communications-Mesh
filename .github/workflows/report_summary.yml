name: report-summary

on:
  workflow_call:
    inputs:
      artifact-name:
        required: true
        type: string
      artifact-path:
        required: false
        type: string

jobs:
  summarize:
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Download report artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: ${{ inputs.artifact-name }}
          path: ./report_artifacts

      - name: Locate report.json
        id: locate
        run: |
          if [ -n "${{ inputs.artifact-path }}" ]; then
            REPORT_PATH="${{ inputs.artifact-path }}"
          else
            REPORT_PATH=$(find report_artifacts -type f -name 'report.json' | head -n1 || true)
          fi
          echo "REPORT_PATH=$REPORT_PATH" >> "$GITHUB_ENV"
          if [ -z "$REPORT_PATH" ]; then
            echo "No report.json found in downloaded artifacts"
            exit 1
          fi

      - name: Add report to summary
        if: always()
        run: |
          {
            echo "## Smoke Tests Report"
            echo ""

            # Check if JSON report exists
            REPORT_FILE="$REPORT_PATH"
            if [ -f "$REPORT_FILE" ]; then
              # Parse JSON report
              PASSED=$(jq '.summary.passed // 0' "$REPORT_FILE")
              FAILED=$(jq '.summary.failed // 0' "$REPORT_FILE")
              SKIPPED=$(jq '.summary.skipped // 0' "$REPORT_FILE")
              ERROR=$(jq '.summary.errors // 0' "$REPORT_FILE")
              WARNINGS=$(jq '.summary.warnings // 0' "$REPORT_FILE")

              # Add summary stats
              echo "| Status | Count |"
              echo "| ------ | ----- |"
              echo "| ✅ Passed | ${PASSED:-0} |"
              echo "| ❌ Failed | ${FAILED:-0} |"
              echo "| ⚠️ Error | ${ERROR:-0} |"
              echo "| ⏭️ Skipped | ${SKIPPED:-0} |"
              echo "| ⚠️ Warnings | ${WARNINGS:-0} |"
              echo ""

              # Add test result details if available
              TOTAL=$((${PASSED:-0} + ${FAILED:-0} + ${ERROR:-0} + ${SKIPPED:-0}))
              echo "**Total Tests:** $TOTAL"
              echo ""
              if [ "${FAILED:-0}" -gt 0 ] || [ "${ERROR:-0}" -gt 0 ]; then
                echo "❌ **Some tests failed!** Please check the detailed report."
              else
                echo "✅ **All tests passed!**"
              fi
              echo ""
              
              # Add detailed test results table
              echo "### Detailed Test Results"
              echo ""
              echo "| Test Name | Status | Duration (ms) |"
              echo "| --------- | ------ | ------------- |"
              
              # Process each test from the report - fixed to work with nested test structure
              jq -r '.results[] | recurse(.suites[]?) | 
                select(.type == "test") | 
                (.name // .title) + "|" + 
                (if .status == "passed" then "✅ Passed" 
                elif .status == "failed" then "❌ Failed" 
                elif .status == "skipped" then "⏭️ Skipped" 
                else "⚠️ Error" end) + "|" + 
                (.duration | tostring)' "$REPORT_FILE" 2>/dev/null || echo "| Error parsing test results | ⚠️ | - |"
              
              # Extract warnings if available
              WARNINGS_TEXT=$(jq -r '.warnings[]? | "- " + . // ""' "$REPORT_FILE" 2>/dev/null)
              if [ -n "$WARNINGS_TEXT" ]; then
                echo ""
                echo "### Warnings"
                echo ""
                echo "$WARNINGS_TEXT"
              fi
              
              # Extract failures summary if available
              FAILURES_SUMMARY=$(jq -r '.summary.failures_summary // ""' "$REPORT_FILE")
              if [ -n "$FAILURES_SUMMARY" ]; then
                echo ""
                echo "### Failures Summary"
                echo ""
                echo '```'
                echo "$FAILURES_SUMMARY"
                echo '```'
              fi
            else
              echo "❌ No report.json file was generated"
            fi
          } >> "$GITHUB_STEP_SUMMARY"
