// SPDX-FileCopyrightText: Copyright (c) 2024 Intel Corporation
//
// SPDX-License-Identifier: BSD-3-Clause

syntax = "proto3";

package sdk;

import "type.proto";
import "conn-config.proto";

service SDKAPI {
  rpc RegisterAndStreamEvents (RegisterRequest) returns (stream Event);

  rpc CreateConnection (CreateConnectionRequest) returns (CreateConnectionResponse);
  rpc CreateConnectionZeroCopy (CreateConnectionRequest) returns (CreateConnectionZeroCopyResponse);

  rpc ActivateConnection (ActivateConnectionRequest) returns (ActivateConnectionResponse);
  rpc DeleteConnection (DeleteConnectionRequest) returns (DeleteConnectionResponse);

  rpc SendMetrics (SendMetricsRequest) returns (SendMetricsResponse);
}

message RegisterRequest {
}

message ClientRegisteredEvent {
  string client_id = 1;
}

message ConnectionUnlinkRequestedEvent {
  string conn_id = 1;
}

message ConnectionZeroCopyConfigEvent {
  string conn_id       = 1;
  string temporary_id  = 2;
  int32 sysv_key       = 3;
  uint32 mem_region_sz = 4;
}

message ReportMetricsTriggeredEvent {
}

message Event {
  oneof event {
    ClientRegisteredEvent client_registered              = 1;
    ConnectionUnlinkRequestedEvent conn_unlink_requested = 2;
    ConnectionZeroCopyConfigEvent conn_zero_copy_config  = 3;
    ReportMetricsTriggeredEvent report_metrics_triggered = 4;
  }
}

message CreateConnectionRequest {
  string client_id        = 1;
  ConnectionConfig config = 2;
  string name             = 3;
  string temporary_id     = 4;
}

message CreateConnectionResponse {
  string conn_id         = 1;
  bytes memif_conn_param = 2;
}

message CreateConnectionZeroCopyResponse {
  string conn_id = 1;
}

message ActivateConnectionRequest {
  string client_id = 1;
  string conn_id   = 2;
}

message ActivateConnectionResponse {
  bool linked = 1;
}

message DeleteConnectionRequest {
  string client_id = 1;
  string conn_id   = 2;
}

message DeleteConnectionResponse {
}

message SendMetricsRequest {
  string client_id                        = 1;
  repeated ConnectionMetrics conn_metrics = 2;
}

message ConnectionMetrics {
  string conn_id                = 1;
  uint64 inbound_bytes          = 2;
  uint64 outbound_bytes         = 3;
  uint32 transactions_succeeded = 4;
  uint32 transactions_failed    = 5;
  uint32 errors                 = 6;
}

message SendMetricsResponse {
}
