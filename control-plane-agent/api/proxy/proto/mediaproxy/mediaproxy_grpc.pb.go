// SPDX-FileCopyrightText: Copyright (c) 2024 Intel Corporation
//
// SPDX-License-Identifier: BSD-3-Clause

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: mediaproxy.proto

package mediaproxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ControlAPI_RegisterMediaProxy_FullMethodName   = "/mediaproxy.ControlAPI/RegisterMediaProxy"
	ControlAPI_UnregisterMediaProxy_FullMethodName = "/mediaproxy.ControlAPI/UnregisterMediaProxy"
	ControlAPI_RegisterConnection_FullMethodName   = "/mediaproxy.ControlAPI/RegisterConnection"
	ControlAPI_UnregisterConnection_FullMethodName = "/mediaproxy.ControlAPI/UnregisterConnection"
	ControlAPI_StartCommandQueue_FullMethodName    = "/mediaproxy.ControlAPI/StartCommandQueue"
)

// ControlAPIClient is the client API for ControlAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlAPIClient interface {
	RegisterMediaProxy(ctx context.Context, in *RegisterMediaProxyRequest, opts ...grpc.CallOption) (*RegisterMediaProxyReply, error)
	UnregisterMediaProxy(ctx context.Context, in *UnregisterMediaProxyRequest, opts ...grpc.CallOption) (*UnregisterMediaProxyReply, error)
	RegisterConnection(ctx context.Context, in *RegisterConnectionRequest, opts ...grpc.CallOption) (*RegisterConnectionReply, error)
	UnregisterConnection(ctx context.Context, in *UnregisterConnectionRequest, opts ...grpc.CallOption) (*UnregisterConnectionReply, error)
	StartCommandQueue(ctx context.Context, in *StartCommandQueueRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CommandMessage], error)
}

type controlAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewControlAPIClient(cc grpc.ClientConnInterface) ControlAPIClient {
	return &controlAPIClient{cc}
}

func (c *controlAPIClient) RegisterMediaProxy(ctx context.Context, in *RegisterMediaProxyRequest, opts ...grpc.CallOption) (*RegisterMediaProxyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterMediaProxyReply)
	err := c.cc.Invoke(ctx, ControlAPI_RegisterMediaProxy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlAPIClient) UnregisterMediaProxy(ctx context.Context, in *UnregisterMediaProxyRequest, opts ...grpc.CallOption) (*UnregisterMediaProxyReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterMediaProxyReply)
	err := c.cc.Invoke(ctx, ControlAPI_UnregisterMediaProxy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlAPIClient) RegisterConnection(ctx context.Context, in *RegisterConnectionRequest, opts ...grpc.CallOption) (*RegisterConnectionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterConnectionReply)
	err := c.cc.Invoke(ctx, ControlAPI_RegisterConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlAPIClient) UnregisterConnection(ctx context.Context, in *UnregisterConnectionRequest, opts ...grpc.CallOption) (*UnregisterConnectionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterConnectionReply)
	err := c.cc.Invoke(ctx, ControlAPI_UnregisterConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlAPIClient) StartCommandQueue(ctx context.Context, in *StartCommandQueueRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CommandMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ControlAPI_ServiceDesc.Streams[0], ControlAPI_StartCommandQueue_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StartCommandQueueRequest, CommandMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlAPI_StartCommandQueueClient = grpc.ServerStreamingClient[CommandMessage]

// ControlAPIServer is the server API for ControlAPI service.
// All implementations must embed UnimplementedControlAPIServer
// for forward compatibility.
type ControlAPIServer interface {
	RegisterMediaProxy(context.Context, *RegisterMediaProxyRequest) (*RegisterMediaProxyReply, error)
	UnregisterMediaProxy(context.Context, *UnregisterMediaProxyRequest) (*UnregisterMediaProxyReply, error)
	RegisterConnection(context.Context, *RegisterConnectionRequest) (*RegisterConnectionReply, error)
	UnregisterConnection(context.Context, *UnregisterConnectionRequest) (*UnregisterConnectionReply, error)
	StartCommandQueue(*StartCommandQueueRequest, grpc.ServerStreamingServer[CommandMessage]) error
	mustEmbedUnimplementedControlAPIServer()
}

// UnimplementedControlAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedControlAPIServer struct{}

func (UnimplementedControlAPIServer) RegisterMediaProxy(context.Context, *RegisterMediaProxyRequest) (*RegisterMediaProxyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMediaProxy not implemented")
}
func (UnimplementedControlAPIServer) UnregisterMediaProxy(context.Context, *UnregisterMediaProxyRequest) (*UnregisterMediaProxyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterMediaProxy not implemented")
}
func (UnimplementedControlAPIServer) RegisterConnection(context.Context, *RegisterConnectionRequest) (*RegisterConnectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterConnection not implemented")
}
func (UnimplementedControlAPIServer) UnregisterConnection(context.Context, *UnregisterConnectionRequest) (*UnregisterConnectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterConnection not implemented")
}
func (UnimplementedControlAPIServer) StartCommandQueue(*StartCommandQueueRequest, grpc.ServerStreamingServer[CommandMessage]) error {
	return status.Errorf(codes.Unimplemented, "method StartCommandQueue not implemented")
}
func (UnimplementedControlAPIServer) mustEmbedUnimplementedControlAPIServer() {}
func (UnimplementedControlAPIServer) testEmbeddedByValue()                    {}

// UnsafeControlAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlAPIServer will
// result in compilation errors.
type UnsafeControlAPIServer interface {
	mustEmbedUnimplementedControlAPIServer()
}

func RegisterControlAPIServer(s grpc.ServiceRegistrar, srv ControlAPIServer) {
	// If the following call pancis, it indicates UnimplementedControlAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ControlAPI_ServiceDesc, srv)
}

func _ControlAPI_RegisterMediaProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMediaProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlAPIServer).RegisterMediaProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlAPI_RegisterMediaProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlAPIServer).RegisterMediaProxy(ctx, req.(*RegisterMediaProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlAPI_UnregisterMediaProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterMediaProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlAPIServer).UnregisterMediaProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlAPI_UnregisterMediaProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlAPIServer).UnregisterMediaProxy(ctx, req.(*UnregisterMediaProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlAPI_RegisterConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlAPIServer).RegisterConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlAPI_RegisterConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlAPIServer).RegisterConnection(ctx, req.(*RegisterConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlAPI_UnregisterConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlAPIServer).UnregisterConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlAPI_UnregisterConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlAPIServer).UnregisterConnection(ctx, req.(*UnregisterConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlAPI_StartCommandQueue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartCommandQueueRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlAPIServer).StartCommandQueue(m, &grpc.GenericServerStream[StartCommandQueueRequest, CommandMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlAPI_StartCommandQueueServer = grpc.ServerStreamingServer[CommandMessage]

// ControlAPI_ServiceDesc is the grpc.ServiceDesc for ControlAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mediaproxy.ControlAPI",
	HandlerType: (*ControlAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterMediaProxy",
			Handler:    _ControlAPI_RegisterMediaProxy_Handler,
		},
		{
			MethodName: "UnregisterMediaProxy",
			Handler:    _ControlAPI_UnregisterMediaProxy_Handler,
		},
		{
			MethodName: "RegisterConnection",
			Handler:    _ControlAPI_RegisterConnection_Handler,
		},
		{
			MethodName: "UnregisterConnection",
			Handler:    _ControlAPI_UnregisterConnection_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartCommandQueue",
			Handler:       _ControlAPI_StartCommandQueue_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mediaproxy.proto",
}
