/*
 * SPDX-FileCopyrightText: Copyright (c) 2023 Intel Corporation
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

syntax = "proto3";

package controller;

service Configure {
    rpc TxStart (TxControlRequest) returns (ControlReply) {}
    rpc RxStart (RxControlRequest) returns (ControlReply) {}
    rpc TxStop (StopControlRequest) returns (ControlReply) {}
    rpc RxStop (StopControlRequest) returns (ControlReply) {}
    rpc Stop (StopControlRequest) returns (ControlReply) {}
}

enum StPmdType {
  ST_PMD_DPDK_USER = 0;
  ST_PMD_DPDK_AF_XDP = 1;
  ST_PMD_DPDK_AF_PACKET = 2;
  ST_PMD_KERNEL_SOCKET = 3;
  ST_PMD_NATIVE_AF_XDP = 4;
  ST_PMD_TYPE_MAX = 5;
};

enum StLogLevel {
  MTL_LOG_LEVEL_DEBUG = 0;
  MTL_LOG_LEVEL_INFO = 1;
  MTL_LOG_LEVEL_WARNING = 2;
  MTL_LOG_LEVEL_ERROR = 3;
  MTL_LOG_LEVEL_MAX = 4;
};

enum StFps {
  ST_FPS_P59_94 = 0;
  ST_FPS_P50 = 1;
  ST_FPS_P29_97 = 2;
  ST_FPS_P25 = 3;
  ST_FPS_P119_88 = 4;
  ST_FPS_P120 = 5;
  ST_FPS_P100 = 6;
  ST_FPS_P60 = 7;
  ST_FPS_P30 = 8;
  ST_FPS_P24 = 9;
  ST_FPS_P23_98 = 10;
  ST_FPS_MAX = 11;
};

enum St20Fmt {
  ST20_FMT_YUV_422_10BIT = 0;
  ST20_FMT_YUV_422_8BIT = 1;
  ST20_FMT_YUV_422_12BIT = 2;
  ST20_FMT_YUV_422_16BIT = 3;
  ST20_FMT_YUV_420_8BIT = 4;
  ST20_FMT_YUV_420_10BIT = 5;
  ST20_FMT_YUV_420_12BIT = 6;
  ST20_FMT_RGB_8BIT = 7;
  ST20_FMT_RGB_10BIT = 8;
  ST20_FMT_RGB_12BIT = 9;
  ST20_FMT_RGB_16BIT = 10;
  ST20_FMT_YUV_444_8BIT = 11;
  ST20_FMT_YUV_444_10BIT = 12;
  ST20_FMT_YUV_444_12BIT = 13;
  ST20_FMT_YUV_444_16BIT = 14;
  ST20_FMT_MAX = 15;
};

enum StFrameFmt {
  ST_FRAME_FMT_YUV422PLANAR10LE = 0;
  ST_FRAME_FMT_V210 = 1;
  ST_FRAME_FMT_YUV422PLANAR8 = 2;
  ST_FRAME_FMT_YUV422PACKED8 = 3;
  ST_FRAME_FMT_YUV422RFC4175PG2BE10 = 4;
  ST_FRAME_FMT_ARGB = 8;
  ST_FRAME_FMT_BGRA = 9;
  ST_FRAME_FMT_RGB8 = 10;
  ST_FRAME_FMT_JPEGXS_CODESTREAM = 24;
  ST_FRAME_FMT_MAX = 25;
};

enum StPluginDevice {
  ST_PLUGIN_DEVICE_AUTO = 0;
  ST_PLUGIN_DEVICE_CPU = 1;
  ST_PLUGIN_DEVICE_GPU = 2;
  ST_PLUGIN_DEVICE_FPGA = 3;
  ST_PLUGIN_DEVICE_TEST = 4;
  ST_PLUGIN_DEVICE_MAX = 5;
};

message StInit {
    uint32 number_ports = 1;
    string primary_port = 2;
    string redundant_port = 3;
    StPmdType pmd_type = 4;
    repeated uint32 primary_sip_addr = 5;
    repeated uint32 redundant_sip_addr = 6;
    uint64 flags = 7;
    StLogLevel log_level = 8;
    string logical_cores = 9;
    uint32 tx_sessions_cnt_max = 10;
    uint32 rx_sessions_cnt_max = 11;
}

message StRxPort {
    uint32 number_ports = 1;
    uint32 payload_type = 2;
    string port = 3;
    repeated uint32 sip_addr = 4;
    uint32 udp_port = 5;
}

message StTxPort {
    uint32 number_ports = 1;
    uint32 payload_type = 2;
    string port = 3;
    repeated uint32 dip_addr = 4;
    uint32 udp_port = 5;
}

message St20pRxOps {
    StRxPort rx_port = 1;
    string name = 2;
    uint32 width = 3;
    uint32 height = 4;
    uint32 framebuffer_cnt = 5;
    StFps fps = 6;
    St20Fmt transport_fmt = 7;
    StFrameFmt output_fmt = 8;
    StPluginDevice device = 9;
}

message St20pTxOps {
    StTxPort tx_port = 1;
    string name = 2;
    uint32 width = 3;
    uint32 height = 4;
    uint32 framebuffer_cnt = 5;
    StFps fps = 6;
    St20Fmt transport_fmt = 7;
    StFrameFmt input_fmt = 8;
    StPluginDevice device = 9;
    repeated uint32 tx_dst_mac = 10;
}

message MemIFOps {
    string app_name = 1;
    string interface_name = 2;
    string socket_path = 3;
}

message TxControlRequest {
    StInit st_init = 1;
    St20pTxOps st20_tx = 2;
    MemIFOps memif_ops = 3;
}

message TxSessionParams {
    string name = 1;
    StTxPort tx_port = 2;
    uint32 width = 3;
    uint32 height = 4;
    StFps fps = 6;
    StFrameFmt format = 8;
}

message RxControlRequest {
    StInit st_init = 1;
    St20pRxOps st20_rx = 2;
    MemIFOps memif_ops = 3;
}

message StopControlRequest {
    int32 session_id = 1;
    // stop parameters...
}

message ControlReply {
    string message = 1;
}

// for MSM Control Plane
enum StreamOperation {
	CREATE = 0;
	UPDATE = 1;
	DELETE = 2;
	ADD_EP = 3;
	DEL_EP = 4;
	UPD_EP = 5;
}

enum ProxyProtocol {
	TCP = 0;
	UDP = 1;
	QUIC = 2;
	RTP = 3;
}

enum Encap {
	TCP_IP = 0;
	UDP_IP = 1;
	QUIC_IP = 2;
	RTP_UDP = 3;
	RTP_UDP_MUX = 4;
	RTP_TCP = 5;
	RTP_TCP_MUX = 6;
	RTP_QUIC_STREAM = 7;
	RTP_QUIC_DGRAM = 8;
}

message Endpoint {
	string ip = 1;
	uint32 port = 2;
	uint32 quic_stream = 3;
	uint32 encap = 4;
}

message StreamData {
	uint32 id = 1;
	StreamOperation operation = 2;
	ProxyProtocol protocol = 3;
	Endpoint endpoint = 4;
	bool enable = 5;
}

message StreamResult {
	bool success = 1;
	string error_message = 2;
}

service MsmDataPlane {
	rpc stream_add_del (StreamData) returns (StreamResult) {}
}

// Health check request to find out the readiness/liveness.
message HealthCheckRequest {
  string service = 1;
}

// Health check response.
message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;  // Used only by the Watch method.

  }
  ServingStatus status = 1;
}

// Health check request.
service Health {
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
  rpc Watch(HealthCheckRequest) returns (HealthCheckResponse);
}
